use std::mem;

pub fn string_compression(input_string: &str) -> String {
    let mut output = String::new();
    let mut repeat_count = 0;
    let mut prev_char = 'a';

    for (ix, char) in input_string.chars().enumerate() {
        if ix == 0 {
             prev_char = char;
             continue;
        }
        if char == prev_char {
            repeat_count += 1;
        } else {
            output = format!("{}{}", output, prev_char);
            prev_char = char;
            if repeat_count > 0 {
                output = format!("{}{}", output, repeat_count + 1);
            }

            repeat_count = 0;
        }
    }
    output = format!("{}{}", output, prev_char);
    if repeat_count > 1 {
        output = format!("{}{}", output, repeat_count);
    }
    output
}

fn main() {
    // let str = String::from("ttttest");
    // println!("{}", string_compression(&str));
    let x: u64 = 18446744073709551615;
    println!("{}", x);
    println!("{}", x as i64);
    println!("{}", unsafe { mem::transmute::<u64, i64>(x) });
}
